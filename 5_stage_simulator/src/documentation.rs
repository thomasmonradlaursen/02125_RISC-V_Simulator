use crate::simulator_engine;

use std::fs;
use std::io::prelude::*;

pub fn test_documentation(filename: &String, stepwise: bool, hazard: bool, forward: bool, expected: &[i32; 32]) {
    let reg = simulator_engine::run_simulation(filename, stepwise, hazard, forward);

    let res = match reg.iter().zip(expected.iter()).all(|(a, b)| a == b) {
        true => "Successful",
        false => "Failed",
    };

    let mut file = fs::OpenOptions::new()
        .write(true)
        .append(true)
        .open("test_results.txt")
        .unwrap();

    writeln!(file, "Test: {}\n", res).unwrap();
}

pub fn add() -> [i32; 32] {
    [0,0,0,0,0,-100,125,160,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0]
}

pub fn addi() -> [i32; 32] {
    [0,0,0,0,0,0,125,160,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0]
}

pub fn and() -> [i32; 32] {
    [0,0,0,0,0,251723761,1793,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn andi() -> [i32; 32] {
    [0,0,0,0,0,251723761,1793,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn auipc() -> [i32; 32] {
    [0,0,0,0,0,4194304,4194308,1883242504,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0]
}

pub fn beq() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn bge() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,0,1,10,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn bgeu() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,0,1,10,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn blt() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,1,0,10,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn bltu() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,1,0,10,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn bne() -> [i32; 32] {
    [0,0,0,0,0,5,-10,0,1,0,10,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn jal() -> [i32; 32] {
    [0,0,0,0,0,4,16,0,1,1,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn jalr() -> [i32; 32] {
    [0,0,0,0,0,4,20,0,1,1,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn lb() -> [i32; 32] {
    [0,0,0,0,0,102,-128,79,102,-2139062144,10,0,0,0,0,0,0,0,39,1330597711,103,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn lbu() -> [i32; 32] {
    [0,0,0,0,0,102,128,79,102,-2139062144,10,0,0,0,0,0,0,0,39,1330597711,103,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn lh() -> [i32; 32] {
    [0,0,0,0,0,13302,-32640,20303,13302,-2139062144,10,0,0,0,0,0,0,0,39,1330597711,103,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn lhu() -> [i32; 32] {
    [0,0,0,0,0,13302,32896,20303,13302,-2139062144,10,0,0,0,0,0,0,0,39,1330597711,103,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn li() -> [i32; 32] {
    [0,0,0,0,0,0,0,0,-1,29154821,10,0,0,0,0,0,0,0,-1301186204,-12,-1125213234,-16777216,0,0,0,0,0,0,0,0,0,0]
}

pub fn lui() -> [i32; 32] {
    [0,0,0,0,0,4194304,259366912,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn lw() -> [i32; 32] {
    [0,0,0,0,0,1338802,-2139062144,1330597711,1338802,-2139062144,10,0,0,0,0,0,0,0,39,1330597711,103,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn or() -> [i32; 32] {
    [0,0,0,0,0,-1895759887,-1895759887,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn ori() -> [i32; 32] {
    [0,0,0,0,0,-1895759887,-1895759887,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn sb() -> [i32; 32] {
    [0,0,0,0,0,102,102,0,102,60,10,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn sh() -> [i32; 32] {
    [0,0,0,0,0,45,10232,0,52781,50,10,0,0,0,0,0,0,0,10232,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn sll() -> [i32; 32] {
    [0,0,0,0,0,251723520,-267390976,-16777216,16,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn slli() -> [i32; 32] {
    [0,0,0,0,0,251723520,-267390976,-16777216,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn slt() -> [i32; 32] {
    [0,0,0,0,0,-20,1,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]
}

pub fn slti() -> [i32; 32] {
    [0,0,0,0,0,-20,1,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]
}

pub fn sltiu() -> [i32; 32] {
    [0,0,0,0,0,-20,1,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0]
}

pub fn sltu() -> [i32; 32] {
    [0,0,0,0,0,-20,1,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0]
}

pub fn sra() -> [i32; 32] {
    [0,0,0,0,0,15794160,-15732721,-61456,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,987135,3855,0,0]
}

pub fn srai() -> [i32; 32] {
    [0,0,0,0,0,15794160,-15732721,-61456,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,987135,3855,0,0]
}

pub fn srl() -> [i32; 32] {
    [0,0,0,0,0,-251723536,252702735,987120,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn srli() -> [i32; 32] {
    [0,0,0,0,0,-251723536,252702735,987120,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}


pub fn sub() -> [i32; 32] {
    [0,0,0,0,0,-100,-125,-160,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-60,0,0,0]
}

pub fn sw() -> [i32; 32] {
    [0,0,0,0,0,45,-50,116,980733485,50,10,0,0,0,0,0,0,0,10232,10232,0,0,0,0,0,0,0,0,58,-12755,14964,29902]
}

pub fn xor() -> [i32; 32] {
    [0,0,0,0,0,251723760,1807,251721983,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn xori() -> [i32; 32] {
    [0,0,0,0,0,251723760,251721983,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}

pub fn load_use() -> [i32; 32] {
    [0,1,2,1,3,-1,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}
